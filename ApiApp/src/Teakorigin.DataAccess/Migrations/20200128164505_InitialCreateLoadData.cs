// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Teakorigin.DataAccess.Migrations
{
    public partial class InitialCreateLoadData : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AnalyteUom",
                columns: table => new
                {
                    analyte_name = table.Column<string>(nullable: false),
                    uom = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AnalyteUom", x => x.analyte_name);
                });

            migrationBuilder.CreateTable(
                name: "CustomerPerception",
                columns: table => new
                {
                    PerceptionId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    LocationCode = table.Column<string>(unicode: false, maxLength: 50, nullable: false),
                    RetailerCode = table.Column<string>(unicode: false, maxLength: 50, nullable: false),
                    PerceptionScore = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerPerception", x => x.PerceptionId);
                });

            migrationBuilder.CreateTable(
                name: "DistributedCache",
                columns: table => new
                {
                    Id = table.Column<string>(maxLength: 449, nullable: false),
                    Value = table.Column<byte[]>(nullable: false),
                    ExpiresAtTime = table.Column<DateTimeOffset>(nullable: false),
                    SlidingExpirationInSeconds = table.Column<long>(nullable: true),
                    AbsoluteExpiration = table.Column<DateTimeOffset>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DistributedCache", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Location",
                columns: table => new
                {
                    LocationCode = table.Column<string>(maxLength: 50, nullable: false),
                    ID = table.Column<long>(nullable: false),
                    LocationName = table.Column<string>(maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Location", x => x.LocationCode);
                });

            migrationBuilder.CreateTable(
                name: "Produce",
                columns: table => new
                {
                    ProduceCode = table.Column<string>(maxLength: 80, nullable: false),
                    ID = table.Column<long>(nullable: false),
                    ProduceName = table.Column<string>(maxLength: 50, nullable: false),
                    IsParent = table.Column<bool>(nullable: false),
                    IsChild = table.Column<bool>(nullable: false),
                    ParentCode = table.Column<string>(nullable: true),
                    Colour = table.Column<string>(maxLength: 10, nullable: true),
                    usda_sucrose = table.Column<double>(maxLength: 100, nullable: true),
                    usda_fructose = table.Column<double>(maxLength: 100, nullable: true),
                    usda_glucose = table.Column<double>(maxLength: 100, nullable: true),
                    usda_vit_c = table.Column<double>(maxLength: 100, nullable: true),
                    usda_moisture = table.Column<double>(maxLength: 100, nullable: true),
                    usda_anthocyanins = table.Column<double>(maxLength: 100, nullable: true),
                    usda_antioxidants = table.Column<double>(maxLength: 100, nullable: true),
                    usda_citric_acid = table.Column<double>(maxLength: 100, nullable: true),
                    usda_malic_acid = table.Column<double>(maxLength: 100, nullable: true),
                    usda_oxalic_acid = table.Column<double>(maxLength: 100, nullable: true),
                    usda_tartaric = table.Column<double>(maxLength: 100, nullable: true),
                    usda_oil_total = table.Column<double>(maxLength: 100, nullable: true),
                    usda_oleic = table.Column<double>(maxLength: 100, nullable: true),
                    usda_linoleic = table.Column<double>(maxLength: 100, nullable: true),
                    usda_palmitic = table.Column<double>(maxLength: 100, nullable: true),
                    usda_palmitoleic = table.Column<double>(maxLength: 100, nullable: true),
                    usda_lycopene = table.Column<double>(maxLength: 100, nullable: true),
                    usda_carotenoids = table.Column<double>(maxLength: 100, nullable: true),
                    usda_lutein = table.Column<double>(maxLength: 100, nullable: true),
                    usda_potassium = table.Column<double>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Produce", x => x.ProduceCode);
                });

            migrationBuilder.CreateTable(
                name: "RefLocation",
                columns: table => new
                {
                    loc_id = table.Column<long>(nullable: false),
                    loc_entity = table.Column<string>(nullable: true),
                    loc_entity_id = table.Column<string>(nullable: true),
                    loc_location_type = table.Column<string>(nullable: true),
                    loc_location_format = table.Column<string>(nullable: true),
                    loc_address_1 = table.Column<string>(nullable: true),
                    loc_address_2 = table.Column<string>(nullable: true),
                    loc_zip_code = table.Column<string>(nullable: true),
                    loc_city = table.Column<string>(nullable: true),
                    loc_state = table.Column<string>(nullable: true),
                    loc_province = table.Column<string>(nullable: true),
                    loc_country = table.Column<string>(nullable: true),
                    loc_code = table.Column<string>(nullable: true),
                    loc_name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RefLocation", x => x.loc_id);
                });

            migrationBuilder.CreateTable(
                name: "Retailer",
                columns: table => new
                {
                    RetailerCode = table.Column<string>(maxLength: 50, nullable: false),
                    ID = table.Column<long>(nullable: false),
                    RetailerName = table.Column<string>(maxLength: 50, nullable: false),
                    Colour = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Retailer", x => x.RetailerCode);
                });

            migrationBuilder.CreateTable(
                name: "ScanData",
                columns: table => new
                {
                    md_row_id = table.Column<string>(maxLength: 100, nullable: false),
                    md_ScanDate = table.Column<DateTime>(type: "datetime", nullable: false),
                    md_ProduceCode = table.Column<string>(unicode: false, maxLength: 50, nullable: false),
                    md_LocationCode = table.Column<string>(unicode: false, maxLength: 50, nullable: false),
                    md_Supplier = table.Column<string>(unicode: false, maxLength: 50, nullable: false),
                    s_overall = table.Column<double>(nullable: true),
                    md_value = table.Column<double>(nullable: true),
                    md_processing_code = table.Column<string>(maxLength: 100, nullable: true),
                    md_scan_type = table.Column<string>(maxLength: 100, nullable: true),
                    md_barcode = table.Column<string>(maxLength: 100, nullable: true),
                    md_scan_date = table.Column<string>(maxLength: 100, nullable: true),
                    md_collection_id = table.Column<string>(maxLength: 100, nullable: true),
                    md_receipt_ref = table.Column<string>(maxLength: 1000, nullable: true),
                    md_image_ref = table.Column<string>(maxLength: 1000, nullable: true),
                    md_external_ref = table.Column<string>(maxLength: 1000, nullable: true),
                    md_location_id = table.Column<long>(maxLength: 100, nullable: false),
                    md_loc_name = table.Column<string>(maxLength: 100, nullable: true),
                    md_food_type = table.Column<string>(maxLength: 100, nullable: true),
                    md_food_subtype = table.Column<string>(maxLength: 100, nullable: true),
                    md_cultivar = table.Column<string>(maxLength: 100, nullable: true),
                    md_purch_currency = table.Column<string>(maxLength: 100, nullable: true),
                    md_purch_price = table.Column<double>(maxLength: 100, nullable: true),
                    md_price_by = table.Column<string>(maxLength: 100, nullable: true),
                    md_package_type = table.Column<string>(maxLength: 100, nullable: true),
                    md_quantity = table.Column<string>(maxLength: 100, nullable: true),
                    md_weight = table.Column<double>(maxLength: 100, nullable: true),
                    md_weight_uom = table.Column<string>(maxLength: 100, nullable: true),
                    md_sell_by_date = table.Column<DateTime>(maxLength: 100, nullable: true),
                    md_brand_1 = table.Column<string>(maxLength: 100, nullable: true),
                    md_brand_2 = table.Column<string>(maxLength: 100, nullable: true),
                    md_origin_region = table.Column<string>(maxLength: 100, nullable: true),
                    md_origin_sub_region = table.Column<string>(maxLength: 100, nullable: true),
                    md_organic = table.Column<string>(maxLength: 100, nullable: true),
                    d_instrument = table.Column<string>(maxLength: 100, nullable: true),
                    d_model_version = table.Column<string>(maxLength: 100, nullable: true),
                    d_transfer_function = table.Column<string>(maxLength: 100, nullable: true),
                    d_scans_averaged = table.Column<int>(maxLength: 100, nullable: true),
                    d_scan_type = table.Column<string>(maxLength: 100, nullable: true),
                    d_operator_id = table.Column<string>(maxLength: 100, nullable: true),
                    p_classifier = table.Column<string>(maxLength: 100, nullable: true),
                    p_defect_indicator = table.Column<string>(maxLength: 100, nullable: true),
                    p_defect_percent = table.Column<double>(maxLength: 100, nullable: true),
                    p_sucrose = table.Column<double>(maxLength: 100, nullable: true),
                    p_fructose = table.Column<double>(maxLength: 100, nullable: true),
                    p_glucose = table.Column<double>(maxLength: 100, nullable: true),
                    p_vit_c = table.Column<double>(maxLength: 100, nullable: true),
                    p_moisture = table.Column<double>(maxLength: 100, nullable: true),
                    p_anthocyanins = table.Column<double>(maxLength: 100, nullable: true),
                    p_antioxidants = table.Column<double>(maxLength: 100, nullable: true),
                    p_citric_acid = table.Column<double>(maxLength: 100, nullable: true),
                    p_malic_acid = table.Column<double>(maxLength: 100, nullable: true),
                    p_oxalic_acid = table.Column<double>(maxLength: 100, nullable: true),
                    p_tartaric = table.Column<double>(maxLength: 100, nullable: true),
                    p_oil_total = table.Column<double>(maxLength: 100, nullable: true),
                    p_oleic = table.Column<double>(maxLength: 100, nullable: true),
                    p_linoleic = table.Column<double>(maxLength: 100, nullable: true),
                    p_palmitic = table.Column<double>(maxLength: 100, nullable: true),
                    p_palmitoleic = table.Column<double>(maxLength: 100, nullable: true),
                    p_lycopene = table.Column<double>(maxLength: 100, nullable: true),
                    p_carotenoids = table.Column<double>(maxLength: 100, nullable: true),
                    p_lutein = table.Column<double>(maxLength: 100, nullable: true),
                    p_potassium = table.Column<double>(maxLength: 100, nullable: true),
                    s_sucrose = table.Column<double>(maxLength: 100, nullable: true),
                    s_fructose = table.Column<double>(maxLength: 100, nullable: true),
                    s_glucose = table.Column<double>(maxLength: 100, nullable: true),
                    s_vit_c = table.Column<double>(maxLength: 100, nullable: true),
                    s_moisture = table.Column<double>(maxLength: 100, nullable: true),
                    s_anthocyanins = table.Column<double>(maxLength: 100, nullable: true),
                    s_antioxidants = table.Column<double>(maxLength: 100, nullable: true),
                    s_citric_acid = table.Column<double>(maxLength: 100, nullable: true),
                    s_malic_acid = table.Column<double>(maxLength: 100, nullable: true),
                    s_oxalic_acid = table.Column<double>(maxLength: 100, nullable: true),
                    s_tartaric = table.Column<double>(maxLength: 100, nullable: true),
                    s_oil_total = table.Column<double>(maxLength: 100, nullable: true),
                    s_oleic = table.Column<double>(maxLength: 100, nullable: true),
                    s_linoleic = table.Column<double>(maxLength: 100, nullable: true),
                    s_palmitic = table.Column<double>(maxLength: 100, nullable: true),
                    s_palmitoleic = table.Column<double>(maxLength: 100, nullable: true),
                    s_lycopene = table.Column<double>(maxLength: 100, nullable: true),
                    s_carotenoids = table.Column<double>(maxLength: 100, nullable: true),
                    s_lutein = table.Column<double>(maxLength: 100, nullable: true),
                    s_potassium = table.Column<double>(maxLength: 100, nullable: true),
                    md_price = table.Column<double>(maxLength: 100, nullable: true),
                    md_food_score_type = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScanData", x => x.md_row_id);
                });

            migrationBuilder.CreateTable(
                name: "LocationProduce",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    LocationCode = table.Column<string>(maxLength: 50, nullable: true),
                    ProduceCode = table.Column<string>(maxLength: 80, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LocationProduce", x => x.ID);
                    table.ForeignKey(
                        name: "FK_LocationProduce_Location",
                        column: x => x.LocationCode,
                        principalTable: "Location",
                        principalColumn: "LocationCode",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LocationProduce_Produce",
                        column: x => x.ProduceCode,
                        principalTable: "Produce",
                        principalColumn: "ProduceCode",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LocationRetailer",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    LocationCode = table.Column<string>(maxLength: 50, nullable: true),
                    RetailerCode = table.Column<string>(maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LocationRetailer", x => x.ID);
                    table.ForeignKey(
                        name: "FK_LocationRetailer_Location",
                        column: x => x.LocationCode,
                        principalTable: "Location",
                        principalColumn: "LocationCode",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LocationRetailer_Retailer",
                        column: x => x.RetailerCode,
                        principalTable: "Retailer",
                        principalColumn: "RetailerCode",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.InsertData(
                table: "AnalyteUom",
                columns: new[] { "analyte_name", "uom" },
                values: new object[,]
                {
                    { "sucrose", "g" },
                    { "potassium", "mg" },
                    { "lutein", "ug" },
                    { "carotenoids", "ug" },
                    { "lycopene", "ug" },
                    { "palmitoleic", "g" },
                    { "linoleic", "g" },
                    { "oleic", "g" },
                    { "oil_total", "g" },
                    { "tartaric", "g" },
                    { "palmitic", "g" },
                    { "malic_acid", "g" },
                    { "citric_acid", "g" },
                    { "antioxidants", "mmol" },
                    { "anthocyanins", "mg" },
                    { "moisture", "g" },
                    { "vit_c", "mg" },
                    { "glucose", "g" },
                    { "fructose", "g" },
                    { "oxalic_acid", "g" }
                });

            migrationBuilder.InsertData(
                table: "CustomerPerception",
                columns: new[] { "PerceptionId", "LocationCode", "PerceptionScore", "RetailerCode" },
                values: new object[,]
                {
                    { 20, "los-angeles", 3, "sprouts" },
                    { 13, "los-angeles", 4, "whole-foods" },
                    { 14, "los-angeles", 5, "trader-joes" },
                    { 15, "los-angeles", 6, "aldi" },
                    { 19, "los-angeles", 10, "walmart" },
                    { 17, "los-angeles", 8, "amazon-fresh" },
                    { 18, "los-angeles", 9, "target" },
                    { 12, "los-angeles", 2, "costco" },
                    { 16, "los-angeles", 7, "ralphs" },
                    { 11, "los-angeles", 1, "gelsons" },
                    { 5, "boston", 5, "aldi" },
                    { 9, "boston", 9, "target" },
                    { 10, "boston", 10, "walmart" },
                    { 2, "boston", 2, "costco" },
                    { 3, "boston", 3, "whole-foods" },
                    { 4, "boston", 4, "trader-joes" },
                    { 1, "boston", 1, "wegmans" },
                    { 6, "boston", 6, "bjs" },
                    { 7, "boston", 7, "amazon-fresh" },
                    { 8, "boston", 8, "stop-n-shop" }
                });

            migrationBuilder.InsertData(
                table: "Location",
                columns: new[] { "LocationCode", "ID", "LocationName" },
                values: new object[,]
                {
                    { "boston", 1L, "Boston" },
                    { "los-angeles", 2L, "Los Angeles" }
                });

            migrationBuilder.InsertData(
                table: "Produce",
                columns: new[] { "ProduceCode", "Colour", "ID", "IsChild", "IsParent", "ParentCode", "ProduceName", "usda_anthocyanins", "usda_antioxidants", "usda_carotenoids", "usda_citric_acid", "usda_fructose", "usda_glucose", "usda_linoleic", "usda_lutein", "usda_lycopene", "usda_malic_acid", "usda_moisture", "usda_oil_total", "usda_oleic", "usda_oxalic_acid", "usda_palmitic", "usda_palmitoleic", "usda_potassium", "usda_sucrose", "usda_tartaric", "usda_vit_c" },
                values: new object[,]
                {
                    { "grape", "#1CAC69", 16L, false, true, null, "Grape", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null },
                    { "apple", "#00405C", 15L, false, true, null, "Apple", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null },
                    { "strawberry", "#005B82", 13L, false, false, null, "Strawberry", 27.100000000000001, 2.5800000000000001, null, 1.01, 2.4399999999999999, 1.99, null, null, null, 0.17000000000000001, 90.950000000000003, null, null, null, null, null, null, null, null, 58.799999999999997 },
                    { "spinach", "#410C97", 12L, false, false, null, "Spinach", null, 1.98, 32000.0, null, null, null, null, 12198.0, null, null, 91.400000000000006, null, null, 0.56999999999999995, null, null, null, null, null, 28.100000000000001 },
                    { "grape-red", "#B389F5", 11L, true, false, "grape", "Grape red", 21.699999999999999, 0.80000000000000004, null, null, 8.1300000000000008, 7.2000000000000002, null, null, null, 0.28000000000000003, 80.540000000000006, null, null, null, null, null, null, null, 0.54000000000000004, null },
                    { "grape-green", "#6715EB", 10L, true, false, "grape", "Grape green", null, 0.80000000000000004, null, null, 8.1300000000000008, 7.2000000000000002, null, null, null, 0.32000000000000001, 80.540000000000006, null, null, null, null, null, null, null, 0.56000000000000005, null },
                    { "blueberry", "#C44031", 9L, false, false, null, "Blueberry", 163.25999999999999, null, null, 0.83999999999999997, 4.9699999999999998, 4.8799999999999999, null, null, null, null, 84.209999999999994, null, null, null, null, null, null, null, null, 9.6999999999999993 },
                    { "tomato", "#7FADC0", 14L, false, false, null, "Tomato", null, 3.0800000000000001, 7575.0, 0.39000000000000001, 1.3700000000000001, 1.25, null, null, 2573.0, 0.089999999999999997, 94.519999999999996, null, null, null, null, null, null, null, null, 13.699999999999999 },
                    { "avocado", "#FB5440", 7L, false, false, null, "Avocado", 0.23000000000000001, null, null, null, null, null, 1.6699999999999999, null, null, null, 73.230000000000004, 14.66, 9.0700000000000003, null, 2.0800000000000001, 0.69999999999999996, null, null, null, null },
                    { "apple-pink-lady", "#D18D3B", 6L, true, false, "apple", "Apple Pink Lady", 1.6000000000000001, 3.2799999999999998, null, null, 5.9000000000000004, 2.4300000000000002, null, null, null, 0.84999999999999998, 85.560000000000002, null, null, null, null, null, null, 2.0699999999999998, null, 4.5999999999999996 },
                    { "apple-red-delicious", "#FFD5A5", 5L, true, false, "apple", "Apple Red delicious", 1.6000000000000001, 3.2799999999999998, null, null, 5.9000000000000004, 2.4300000000000002, null, null, null, 0.84999999999999998, 85.560000000000002, null, null, null, null, null, null, 2.0699999999999998, null, 4.5999999999999996 },
                    { "apple-honeycrisp", "#FFAD4B", 4L, true, false, "apple", "Apple Honey Crisp", 1.6000000000000001, 3.2799999999999998, null, null, 5.9000000000000004, 2.4300000000000002, null, null, null, 0.84999999999999998, 85.560000000000002, null, null, null, null, null, null, 2.0699999999999998, null, 4.5999999999999996 },
                    { "apple-gala", "#168451", 3L, true, false, "apple", "Apple Gala", 1.6000000000000001, 3.2799999999999998, null, null, 5.9000000000000004, 2.4300000000000002, null, null, null, 0.84999999999999998, 85.560000000000002, null, null, null, null, null, null, 2.0699999999999998, null, 4.5999999999999996 },
                    { "apple-fuji", "#8DD5B3", 2L, true, false, "apple", "Apple Fuji", 1.6000000000000001, 3.2799999999999998, null, null, 5.9000000000000004, 2.4300000000000002, null, null, null, 0.84999999999999998, 85.560000000000002, null, null, null, null, null, null, 2.0699999999999998, null, 4.5999999999999996 },
                    { "apple-braeburn", "#1CAC69", 1L, true, false, "apple", "Apple Braeburn", 1.6000000000000001, 3.2799999999999998, null, null, 5.9000000000000004, 2.4300000000000002, null, null, null, 0.84999999999999998, 85.560000000000002, null, null, null, null, null, null, 2.0699999999999998, null, 4.5999999999999996 },
                    { "banana", "#FDA99F", 8L, false, false, null, "Banana", null, null, null, 0.17999999999999999, 4.8499999999999996, 4.9800000000000004, null, null, null, 0.26000000000000001, 74.909999999999997, null, null, null, null, null, null, 2.3900000000000001, null, 8.6999999999999993 }
                });

            migrationBuilder.InsertData(
                table: "RefLocation",
                columns: new[] { "loc_id", "loc_address_1", "loc_address_2", "loc_city", "loc_code", "loc_country", "loc_entity", "loc_entity_id", "loc_location_format", "loc_location_type", "loc_name", "loc_province", "loc_state", "loc_zip_code" },
                values: new object[,]
                {
                    { 73L, "3850 Mystic Valley Pkwy", "", "Medford", "boston", "USA", "wegmans", "87", "Standard", "retailer-store", "Wegman's", "", "MA", "02155" },
                    { 74L, "278 Middlesex Ave ", "", "Medford", "boston", "USA", "bjs", "1", "Standard", "retailer-store", "BJ's", "", "MA", "02155" },
                    { 75L, "2 Mystic View Rd", "", "Everett", "boston", "USA", "costco", "333", "Standard", "retailer-store", "Costco", "", "MA", "02149" },
                    { 76L, "905 Massachusetts Ave", "", "Arlington", "boston", "USA", "stop-n-shop", "776", "Standard", "retailer-store", "Stop-N-Shop", "", "MA", "02476" },
                    { 80L, "19081 Goldenwest St ", "", "Huntington Beach", "los-angeles", "USA", "ralphs", "", "Standard", "retailer-store", "Ralph's", "", "CA", "92648" },
                    { 78L, "6942 Warner Ave.", "", "Huntington Beach", "los-angeles", "USA", "sprouts", "", "Standard", "retailer-store", "Sprouts", "", "CA", "92647" },
                    { 79L, "7562 Center Ave ", "", "Huntington Beach", "los-angeles", "USA", "costco", "", "Standard", "retailer-store", "Costco", "", "CA", "92647" },
                    { 72L, "630 Fellsway", "", "Medford", "boston", "USA", "aldi", "79", "Standard", "retailer-store", "Aldi", "", "MA", "02155" },
                    { 81L, "3030 Harbor Blvd ste a", "", "Costa Mesa", "los-angeles", "USA", "target", "", "Standard", "retailer-store", "Target", "", "CA", "92626" },
                    { 77L, "17070 Magnolia St", "", "Fountain Valley", "los-angeles", "USA", "aldi", "", "Standard", "retailer-store", "Aldi", "", "CA", "92708" },
                    { 71L, "36 Paramount Dr ", "", "Raynham", "boston", "USA", "walmart", "2021", "SuperCenter", "retailer-store", "Walmart", "", "MA", "02767" },
                    { 67L, "3212 Pico Blvd", "", "Santa Monica", "los-angeles", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "CA", "90405" },
                    { 69L, "13455 Maxella Ave", "", "Marina Del Rey", "los-angeles", "USA", "gelsons", "", "Standard", "retailer-store", "Gelson's", "", "CA", "90292" },
                    { 68L, "4651 Firestone Blvd", "", "South Gate", "los-angeles", "USA", "walmart", "", "SuperCenter", "retailer-store", "Walmart", "", "CA", "90280" },
                    { 82L, "18681 Main St", "", "Huntington Beach", "los-angeles", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "CA", "92648" },
                    { 66L, "2169 W Redondo Beach Blvd", "", "Gardena", "los-angeles", "USA", "target", "", "Standard", "retailer-store", "Target", "", "CA", "90247" },
                    { 65L, "1644 Cloverfield Blvd", "", "Santa Monica", "los-angeles", "USA", "ralphs", "", "Standard", "retailer-store", "Ralph's", "", "CA", "90404" },
                    { 64L, "13463 Washington Blvd", "", "Marina Del Rey", "los-angeles", "USA", "costco", "", "Standard", "retailer-store", "Costco", "", "CA", "90292" },
                    { 63L, "3105 Wilshire Blvd", "", "Santa Monica", "los-angeles", "USA", "sprouts", "", "Standard", "retailer-store", "Sprouts", "", "CA", "90403" },
                    { 62L, "3330 W Century Blvd", "", "Inglewood", "los-angeles", "USA", "aldi", "", "Standard", "retailer-store", "Aldi", "", "CA", "90303" },
                    { 61L, "3850 Mystic Valley Pkwy", "", "Medford", "boston", "USA", "wegmans", "", "Standard", "retailer-store", "Wegman's", "", "MA", "02155" },
                    { 60L, "", "", "Santa Monica", "los-angeles", "USA", "amazon-fresh", "", "Delivery", "retailer-online", "Amazon Fresh", "", "CA", "" },
                    { 59L, "", "", "Waltham", "boston", "USA", "amazon-fresh", "", "Delivery", "retailer-online", "Amazon Fresh", "", "MA", "" },
                    { 58L, "105 Alewife Brook Pkwy", "", "Somerville", "boston", "USA", "stop-n-shop", "2411", "Standard", "retailer-store", "Stop-N-Shop", "", "MA", "02140" },
                    { 70L, "2121 Cloverfield Blvd", "", "Santa Monica", "los-angeles", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "CA", "90404" },
                    { 83L, "3600 W McFadden Ave", "", "Santa Ana", "los-angeles", "USA", "walmart", "", "SuperCenter", "retailer-store", "Walmart", "", "CA", "92704" },
                    { 87L, "760 S Sepulveda Blvd", "", " El Segundo", "los-angeles", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "CA", "90245" },
                    { 85L, "7881 Edinger Ave Ste 150 ", "", "Huntington Beach", "los-angeles", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "CA", "92647" },
                    { 57L, "901 Technology Center Dr", "", "Stoughton", "boston", "USA", "bjs", "34", "Standard", "retailer-store", "BJ's", "", "MA", "02072" },
                    { 109L, "405 N Pacific Coast Hwy", "", "Redondo Beach, CA ", "los-angeles", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "CA", "90277" },
                    { 108L, "13455 Maxella Ave", "", " Marina Del Rey", "los-angeles", "USA", "gelsons", "", "Standard", "retailer-store", "Gelson's", "", "CA", "90292" },
                    { 107L, "1821 Manhattan Beach Blvd", "", " Manhattan Beach", "los-angeles", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "CA", "90266" },
                    { 106L, "14310 Hawthorne Blvd", "", " Lawndale", "los-angeles", "USA", "target", "", "Standard", "retailer-store", "Target", "", "CA", "90260" },
                    { 105L, "500 N Sepulveda Blvd", "", "El Segundo", "los-angeles", "USA", "ralphs", "", "Standard", "retailer-store", "Ralph's", "", "CA", "90245" },
                    { 104L, "3560 W Century Blvd", "", " Inglewood", "los-angeles", "USA", "costco", "", "Standard", "retailer-store", "Costco", "", "CA", "90303" },
                    { 103L, "5660 Sepulveda Blvd", "", " Culver City", "los-angeles", "USA", "sprouts", "", "Standard", "retailer-store", "Sprouts", "", "CA", "90230" },
                    { 102L, "647 Washington St", "", " Newton", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02458" },
                    { 101L, "53 3rd Ave", "", " Burlington", "boston", "USA", "wegmans", "", "Delivery", "retailer-store", "Wegman's", "", "MA", "01803" },
                    { 100L, "1121 Washington St", "", " West Newton", "boston", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "MA", " 02465" },
                    { 84L, "1660 San Miguel Dr", "", "Newport Beach", "los-angeles", "USA", "gelsons", "", "Standard", "retailer-store", "Gelson's", "", "CA", "92660" },
                    { 99L, "550 Arsenal St", "", " Watertown", "boston", "USA", "target", "", "Delivery", "retailer-store", "Target", "", "MA", "02472" },
                    { 97L, "66 Seyon St", "", " Waltham", "boston", "USA", "bjs", "", "Standard", "retailer-store", "BJ's", "", "MA", " 02453" },
                    { 96L, "1515 Hawthorne Blvd", "", " Redondo Beach", "los-angeles", "USA", "sprouts", "", "Standard", "retailer-store", "Sprouts", "", "CA", " 90278" },
                    { 95L, "1550 W Redondo Beach Blvd", "", " Gardena", "los-angeles", "USA", "aldi", "", "Standard", "retailer-store", "Aldi", "", "CA", " 90247" },
                    { 94L, "", "", "Manhattan Beach", "los-angeles", "USA", "amazon-fresh", "", "Delivery", "retailer-online", "Amazon Fresh", "", "CA", "" },
                    { 93L, "14501 Hindry Ave", "", " Hawthorne", "los-angeles", "USA", "costco", "", "Standard", "retailer-store", "Costco", "", "CA", "90250" },
                    { 92L, "1800 Rosecrans Ave", "", " Manhattan Beach", "los-angeles", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "CA", "90266" },
                    { 91L, "14441 S Inglewood Ave", "", " Hawthorne", "los-angeles", "USA", "walmart", "", "Standard", "retailer-store", "Walmart", "", "CA", "90250" },
                    { 90L, "707 N Sepulveda Blvd", "", " Manhattan Beach", "los-angeles", "USA", "gelsons", "", "Standard", "retailer-store", "Gelson's", "", "CA", "90266" },
                    { 89L, "1200 N Sepulveda Blvd", "", " Manhattan Beach", "los-angeles", "USA", "target", "", "Standard", "retailer-store", "Target", "", "CA", "90266" },
                    { 88L, "2700 N Sepulveda Blvd", "", " Manhattan Beach", "los-angeles", "USA", "ralphs", "", "Standard", "retailer-store", "Ralph's", "", "CA", "90266" },
                    { 86L, "", "", "Huntington Beach", "los-angeles", "USA", "amazon-fresh", "", "Delivery", "retailer-online", "Amazon Fresh", "", "CA", "" },
                    { 98L, "700 Pleasant St", "", " Watertown", "boston", "USA", "stop-n-shop", "", "Standard", "retailer-store", "Stop-N-Shop", "", "MA", "02472" },
                    { 56L, "544 Westgate Dr", "", "Brockton", "boston", "USA", "aldi", "", "Standard", "retailer-store", "Aldi", "", "MA", "02301" },
                    { 32L, "1138 Pontiac Ave", "", "Cranston", "boston", "USA", "aldi", "39", "Standard", "retailer-store", "Aldi", "", "RI", "02920" },
                    { 54L, "529 Wellwood Orchards Rd", "", "Springfield", "", "USA", "wellswood", "", "Small Producer", "producer", "Wellswood", "", "VT", "05156" },
                    { 24L, "Albert Rd S", "", "Watford", "london", "UK", "sainsburys", "", "Standard", "retailer-store", "Sainsbury's", "", "", "WD17 1PE" },
                    { 23L, "40 New Kent Rd", "", "London", "london", "UK", "sainsburys", "", "Standard", "retailer-store", "Sainsbury's", "", "", "SE1 6TJ" },
                    { 22L, "36-37 Strand", "", "London", "london", "UK", "sainsburys", "", "Local", "retailer-store", "Sainsbury's", "", "", "WC2N 5HY" },
                    { 55L, "751 Pippin Orchard Rd", "", "Cranston", "", "USA", "pippin-orchards", "", "Small Producer", "producer", "Pippin Orchards", "", "RI", "02921" },
                    { 20L, "125 Strand", "", "London", "london", "UK", "tesco", "", "Express", "retailer-store", "Tesco", "", "", "WC2R 0AP" },
                    { 19L, "Dean St, Soho", "", "London", "london", "UK", "tesco", "", "Metro", "retailer-store", "Tesco", "", "", "W1D 3RF" },
                    { 18L, "22-25 Bedford St, Covent Garden", "", "London", "london", "UK", "tesco", "", "Metro", "retailer-store", "Tesco", "", "", "WC2E 9EQ" },
                    { 17L, "?239-241 Lower High St", "", "Watford", "london", "UK", "tesco", "", "Superstore", "retailer-store", "Tesco", "", "", "WD17 2BD" },
                    { 16L, "107 Dunton Rd", "", "London", "london", "UK", "tesco", "", "Superstore", "retailer-store", "Tesco", "", "", "SE1 5HG" },
                    { 15L, "23-39 The Brunswick Centre", "", "London", "london", "UK", "waitrose", "", "Standard", "retailer-store", "Waitrose", "", "", "WC1N 1AF" },
                    { 14L, "40 Bernard St, Russel Square", "", "London", "london", "UK", "tesco", "", "Express", "retailer-store", "Tesco", "", "", "WC1N 1QJ" },
                    { 25L, "840 Old Kent Rd", "", "London", "london", "UK", "aldi", "", "Standard", "retailer-store", "Aldi", "", "", "SE15 1NQ" },
                    { 13L, "74 St John Str, Farringdon", "", "London", "london", "UK", "waitrose", "", "Standard", "retailer-store", "Waitrose", "", "", "EC1V 4DE" },
                    { 11L, "33 Holborn", "", "London", "london", "UK", "sainsburys", "", "Local", "retailer-store", "Sainsbury's", "", "", "EC1N 2HT" },
                    { 10L, "Moat Farm, Five Oak Green", "", "Tonbridge", "", "UK", "adrian-scripps", "", "Supplier", "distributor", "Adrian Scripps", "", "", "TN12 6RR" },
                    { 9L, "Hays Rd", "", "Snodland", "london", "UK", "tesco", "", "Distribution Center", "retailer-store", "Tesco", "", "", "ME6 5TQ" },
                    { 8L, "115 Prospect St", "", "Cambridge", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02139" },
                    { 7L, "333 Main St", "", "Tewksbury", "boston", "USA", "walmart", "02222", "SuperCenter", "retailer-store", "Walmart", "", "MA", "01876" },
                    { 6L, "160 Broadway", "", "Raynham", "boston", "USA", "walmart", "05448", "SuperCenter", "retailer-store", "Walmart", "", "MA", "02767" },
                    { 5L, "71 Second Ave", "", "Waltham", "boston", "USA", "costco", "308", "Standard", "retailer-store", "Costco", "", "MA", "02451" },
                    { 4L, "45 Beacon St", "", "Somerville", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02143" },
                    { 3L, "770 Broadway", "", "Sagus", "boston", "USA", "walmart", "3114", "SuperCenter", "retailer-store", "Walmart", "", "MA", "01906" },
                    { 2L, "1427 Massachusetts Ave", "", "Arlington", "boston", "USA", "trader-joes", "505", "Standard", "retailer-store", "Trader Joe's", "", "MA", "02476" },
                    { 1L, "822 Somerville Ave", "", "Cambridge", "boston", "USA", "target", "", "Standard", "retailer-store", "Target", "", "MA", "02140" },
                    { 12L, "1 Brewhouse Yard, St John Str, Farringdon", "", "London", "london", "UK", "tesco", "", "Express", "retailer-store", "Tesco", "", "", "EC1V 4JD" },
                    { 26L, "142-162 Kilburn High Rd, North Maida Vale ", "", "London", "london", "UK", "aldi", "", "Standard", "retailer-store", "Aldi", "", "", "NW6 4JD" },
                    { 21L, "77 Fleet St", "", "London", "london", "UK", "sainsburys", "", "Local", "retailer-store", "Sainsbury's", "", "", "EC4Y 1HY" },
                    { 28L, "246 High Holborn", "", "London", "london", "UK", "waitrose", "", "Standard", "retailer-store", "Waitrose", "", "", "WC1V 7EX" },
                    { 53L, "230 Mammoth Rd", "", "Londonderry", "", "USA", "macks-apples", "", "Small Producer", "producer", "Macks Apples", "", "NH", "03053" },
                    { 52L, "141 River Rd", "", "Plainfield", "", "USA", "riverview-farms", "", "Small Producer", "producer", "Riverview Farms", "", "NH", "03781" },
                    { 51L, "", "", "", "boston", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "MA", "" },
                    { 50L, "3 Commerce Drive", "", "Hooksett", "boston", "USA", "walmart", "", "SuperCenter", "retailer-store", "Walmart", "", "NH", "03106" },
                    { 49L, "39 E Main St", "", "Tilton", "boston", "USA", "walmart", "", "SuperCenter", "retailer-store", "Walmart", "", "NH", "03276" },
                    { 48L, "15 Wesetland Ave", "", "Boston", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02115" },
                    { 27L, "300 Oxford St, Marylebone", "", "London", "london", "UK", "waitrose", "", "Standard", "retailer-store", "Waitrose", "", "", "W1C 1DX" },
                    { 46L, "181 Cambridge St", "", "Boston", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02114" },
                    { 45L, "200 Boylson St", "", "Chestnut Hill", "boston", "USA", "wegmans", "407452", "Standard", "retailer-store", "Wegman's", "", "MA", "02467" },
                    { 44L, "647 Washington St", "", "Newton", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02458" },
                    { 43L, "151 Sockanoseet Cross Road", "", "Cranston", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "RI", "02920" },
                    { 42L, "121 Worcester RD", "", "Framingham", "boston", "USA", "walmart", "", "Standard", "retailer-store", "Walmart", "", "MA", "01701" },
                    { 47L, "1291 NE Hansel Ave", "", "Arcadia", "", "USA", "down-south-blues", "", "Supplier", "producer", "Down South Blues", "", "FL", "34266" },
                    { 40L, "116 Farmington Rd", "", "Rochester", "boston", "USA", "walmart", "", "Superstore", "retailer-store", "Walmart", "", "NH", "03867" },
                    { 39L, "10 Pleasant St", "", "Lexington", "", "USA", "wilson-farms", "", "Farmstand", "farmstand", "Wilson Farms", "", "MA", "02421" },
                    { 38L, "211 Alewife Brook Parkway", "", "Cambridge", "boston", "USA", "trader-joes", "517", "Standard", "retailer-store", "Trader Joe's", "", "MA", "02143" },
                    { 37L, "105 Alewife Brook Parkway", "", "Somerville", "boston", "USA", "stop-n-shop", "", "Standard", "retailer-store", "Stop-N-Shop", "", "MA", "02145" },
                    { 36L, "200 Alewife Brook Parkway", "", "Cambridge", "boston", "USA", "whole-foods", "", "Standard", "retailer-store", "Whole Foods", "", "MA", "02138" },
                    { 35L, "145 Middlesex Ave", "", "Somerville", "boston", "USA", "trader-joes", "", "Standard", "retailer-store", "Trader Joe's", "", "MA", "02145" },
                    { 34L, "779 McGrath Highway", "", "Somerville", "boston", "USA", "stop-n-shop", "", "Standard", "retailer-store", "Stop-N-Shop", "", "MA", "02145" },
                    { 33L, "1776 Plainfield Pike", "", "Cranston", "boston", "USA", "walmart", "01873", "Supercenter", "retailer-store", "Walmart", "", "RI", "02921" },
                    { 31L, "46 North-South Rd", "", "North Conway", "boston", "USA", "walmart", "", "Superstore", "retailer-store", "Walmart", "", "NH", "03860" },
                    { 30L, "Odhams Industrial Estate, St Albans Rd", "", "Watford", "london", "UK", "asda", "", "Superstore", "retailer-store", "Asda", "", "", "WD24 7RT" },
                    { 29L, " 464 - 504 Old Kent Rd", "", "London", "london", "UK", "asda", "", "Superstore", "retailer-store", "Asda", "", "", "SE1 5AG" },
                    { 41L, "564 Massachusetts Ave", "", "Rochester", "boston", "USA", "target", "", "City", "retailer-store", "Target", "", "MA", "02139" }
                });

            migrationBuilder.InsertData(
                table: "Retailer",
                columns: new[] { "RetailerCode", "Colour", "ID", "RetailerName" },
                values: new object[,]
                {
                    { "target", "#C44031", 9L, "Target" },
                    { "walmart", "#B389F5", 11L, "Walmart" },
                    { "stop-n-shop", "#FDA99F", 8L, "Stop N Shop" }
                });

            migrationBuilder.InsertData(
                table: "Retailer",
                columns: new[] { "RetailerCode", "Colour", "ID", "RetailerName" },
                values: new object[,]
                {
                    { "trader-joes", "#6715EB", 10L, "Trader Joes" },
                    { "ralphs", "#FB5440", 7L, "Ralphs" },
                    { "aldi", "#1CAC69", 1L, "Aldi" },
                    { "costco", "#FFD5A5", 5L, "Costco" },
                    { "sprouts", "#FFAD4B", 4L, "Bristol Farms" },
                    { "bjs", "#168451", 3L, "BJS" },
                    { "amazon-fresh", "#8DD5B3", 2L, "Amazon Fresh" },
                    { "wegmans", "#410C97", 12L, "Wegmans" },
                    { "gelsons", "#D18D3B", 6L, "Gelsons" },
                    { "whole-foods", "#005B82", 13L, "Whole Foods" }
                });

            migrationBuilder.InsertData(
                table: "LocationProduce",
                columns: new[] { "ID", "LocationCode", "ProduceCode" },
                values: new object[,]
                {
                    { 1L, "boston", "apple-fuji" },
                    { 28L, "los-angeles", "grape" },
                    { 14L, "boston", "grape" },
                    { 27L, "los-angeles", "apple" },
                    { 13L, "boston", "apple" },
                    { 12L, "boston", "tomato" },
                    { 25L, "los-angeles", "strawberry" },
                    { 11L, "boston", "strawberry" },
                    { 24L, "los-angeles", "spinach" },
                    { 10L, "boston", "spinach" },
                    { 23L, "los-angeles", "grape-red" },
                    { 9L, "boston", "grape-red" },
                    { 22L, "los-angeles", "grape-green" },
                    { 8L, "boston", "grape-green" },
                    { 26L, "los-angeles", "tomato" },
                    { 7L, "boston", "blueberry" },
                    { 21L, "los-angeles", "blueberry" },
                    { 15L, "los-angeles", "apple-fuji" },
                    { 2L, "boston", "apple-gala" },
                    { 3L, "boston", "apple-honeycrisp" },
                    { 17L, "los-angeles", "apple-honeycrisp" },
                    { 16L, "los-angeles", "apple-gala" },
                    { 18L, "los-angeles", "apple-red-delicious" },
                    { 5L, "boston", "avocado" },
                    { 19L, "los-angeles", "avocado" },
                    { 6L, "boston", "banana" },
                    { 20L, "los-angeles", "banana" },
                    { 4L, "boston", "apple-red-delicious" }
                });

            migrationBuilder.InsertData(
                table: "LocationRetailer",
                columns: new[] { "ID", "LocationCode", "RetailerCode" },
                values: new object[,]
                {
                    { 9L, "boston", "wegmans" },
                    { 5L, "boston", "stop-n-shop" },
                    { 19L, "los-angeles", "walmart" },
                    { 8L, "boston", "walmart" },
                    { 18L, "los-angeles", "trader-joes" },
                    { 7L, "boston", "trader-joes" },
                    { 17L, "los-angeles", "target" },
                    { 6L, "boston", "target" },
                    { 16L, "los-angeles", "ralphs" },
                    { 12L, "los-angeles", "amazon-fresh" },
                    { 14L, "los-angeles", "costco" },
                    { 4L, "boston", "costco" },
                    { 13L, "los-angeles", "sprouts" },
                    { 3L, "boston", "bjs" },
                    { 2L, "boston", "amazon-fresh" },
                    { 11L, "los-angeles", "aldi" },
                    { 1L, "boston", "aldi" },
                    { 10L, "boston", "whole-foods" },
                    { 15L, "los-angeles", "gelsons" },
                    { 20L, "los-angeles", "whole-foods" }
                });

            migrationBuilder.CreateIndex(
                name: "Index_ExpiresAtTime",
                table: "DistributedCache",
                column: "ExpiresAtTime");

            migrationBuilder.CreateIndex(
                name: "IX_LocationProduce_LocationCode",
                table: "LocationProduce",
                column: "LocationCode");

            migrationBuilder.CreateIndex(
                name: "IX_LocationProduce_ProduceCode",
                table: "LocationProduce",
                column: "ProduceCode");

            migrationBuilder.CreateIndex(
                name: "IX_LocationRetailer_LocationCode",
                table: "LocationRetailer",
                column: "LocationCode");

            migrationBuilder.CreateIndex(
                name: "IX_LocationRetailer_RetailerCode",
                table: "LocationRetailer",
                column: "RetailerCode");

            migrationBuilder.CreateIndex(
                name: "INDEX_ScanData",
                table: "ScanData",
                columns: new[] { "md_Supplier", "md_value", "s_overall", "md_LocationCode", "md_scan_type", "md_ProduceCode", "md_ScanDate" })
                .Annotation("SqlServer:Clustered", false);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AnalyteUom");

            migrationBuilder.DropTable(
                name: "CustomerPerception");

            migrationBuilder.DropTable(
                name: "DistributedCache");

            migrationBuilder.DropTable(
                name: "LocationProduce");

            migrationBuilder.DropTable(
                name: "LocationRetailer");

            migrationBuilder.DropTable(
                name: "RefLocation");

            migrationBuilder.DropTable(
                name: "ScanData");

            migrationBuilder.DropTable(
                name: "Produce");

            migrationBuilder.DropTable(
                name: "Location");

            migrationBuilder.DropTable(
                name: "Retailer");
        }
    }
}
