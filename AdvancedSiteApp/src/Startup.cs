// <copyright file="Startup.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// <autogenerated />
// </copyright>

namespace Teakorigin.Advanced.App
{
    using Microsoft.AspNetCore.Authentication;
    using Microsoft.AspNetCore.Authentication.Cookies;
    using Microsoft.AspNetCore.Authentication.OpenIdConnect;
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.HttpOverrides;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Teakorigin.Advanced.App.Extentions;
    using Teakorigin.Business.Services;
    using Teakorigin.DataAccess;
    using Teakorigin.Domain.Interfaces;
    using Teakorigin.Domain.Models;

    /// <summary>
    /// .The startup class.
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Startup"/> class.
        /// </summary>
        /// <param name="configuration">Configuration parameters.</param>
        public Startup(IConfiguration configuration)
        {
            this.Configuration = configuration;
        }

        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>
        /// The configuration.
        /// </value>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// // This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services">Services collection.</param>
        public void ConfigureServices(IServiceCollection services)
        {
            // The order on how services are configured doesn't really matter, but is good practice to group them acording to relevance e.g: services, MVC configuration, Database, API..
            services.AddHttpClient<IContentService, ContentService>();

            services.AddHttpClient<ISubscriptionService, SendgridSubscriptionService>();

            // Binds appsettings.json to AppSettings.cs, and makes it available for constructor injection in our services/controllers.
            services.ConfigurePoco(this.Configuration.GetSection("AppSettings"), () => new AppSettings());

            // Data access
            services.AddDbContext<TeakOriginContext>(
                opts => opts.UseSqlServer(this.Configuration["ConnectionString:DefaultConnection"],
                providerOptions => providerOptions.EnableRetryOnFailure()));

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);

            // Binds appsettings.json to AppSettings.cs, and makes it available for constructor injection in our services/controllers.
            services.ConfigurePoco(this.Configuration.GetSection("AppSettings"), () => new AppSettings());

            services.AddMemoryCache();

            services.Configure<ForwardedHeadersOptions>(options =>
            {
                options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto | ForwardedHeaders.XForwardedHost;
                options.KnownNetworks.Clear();
                options.KnownProxies.Clear();

            });

            // Configure the Cross-origin resource sharing (CORS) policy
            services.AddCors(
                options =>
                {
                    options.AddPolicy(
                        "DefaultPolicy",
                        builder => builder
                            .AllowAnyOrigin()
                            .AllowAnyMethod()
                            .AllowAnyHeader()
                            .AllowCredentials());
                });

            // We configure the services that relay on Cookies to allow non-essential cookies is needed for a given request
            // B2C use cookies and we don't want to ask the user's consent to set one.
            services.Configure<CookiePolicyOptions>(
                options =>
                {
                    // This determines whether user consent for non-essential cookies is needed for a given request.
                    options.CheckConsentNeeded = context => false;
                    options.MinimumSameSitePolicy = SameSiteMode.None;
                });

            // Adds services required for application session state.
            // This just tells the app, if cookies are create.
            services.AddSession(
                options =>
                {
                    options.Cookie.Name = ".TeakOrigin.Session";
                    options.Cookie.IsEssential = true;
                });

            services.AddAuthentication(sharedOptions =>
            {
                sharedOptions.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                sharedOptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
            })
                .AddAzureAd(options => Configuration.Bind("AzureAd", options))
                .AddCookie();

            services.AddAuthorization(options =>
            {
                options.AddPolicy("Ingestion", (AuthorizationPolicyBuilder builder) => builder?.RequireClaim("groups", this.Configuration["AppSettings:AuthConfig:IngestorGroupId"]));
            });
        }

        /// <summary>
        /// // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app">The app name.</param>
        /// <param name="env">The environment name.</param>
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseForwardedHeaders();

            app.UseStaticFiles();

            // Here we tel the app which Cross-origin resource sharing (CORS) policy.
            app.UseCors("DefaultPolicy");

            // Enables static file serving for the current request path
            app.UseStaticFiles();

            // Adds the AuthenticationMiddleware which enables authentication capabilities.
            app.UseAuthentication();

            // Adds the CookiePolicyMiddleware handler to the specified, which enables cookie policy capabilities.
            app.UseCookiePolicy();

            // Adds the SessionMiddleware to automatically enable session state for the application.
            app.UseSession();

            app.UseMvc(routes =>
            {
                routes.MapRoute("default", "{controller=Home}/{action=Index}/{id?}");
            });

        }
    }
}
